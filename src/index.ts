import * as child_process from 'child_process';
import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import * as fs from 'fs';
import * as path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    ipcMain.handle('selectDirectory', selectDirectory);
    ipcMain.handle('findGitDirectories', (event, root) => {
        return findGitDirectories(root);
    });
    ipcMain.handle('executeGitCommand', (event, command, cwd) => {
        return executeGitCommand(command, cwd);
    });
    createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

async function selectDirectory() {
    const { canceled, filePaths } = await dialog.showOpenDialog({properties: ['openDirectory']});
    if (canceled) {
        return;
    } else {
        return filePaths[0];
    }
}

function findGitDirectories(root: string) {
    if (root == null) {
        return;
    }
    return new Promise((resolve) => {
        const gitDirs: string[] = [];
        findGitDirsRecursive(root, (dir: string) => {
            gitDirs.push(dir);
        });
        resolve(gitDirs);
    });
}

function findGitDirsRecursive(dir: string, found: (folder: string) => void) {
    try {
        fs.accessSync(path.join(dir, '.git'), fs.constants.F_OK);
        found(dir);
    } catch(err) {
        const files = fs.readdirSync(dir, {withFileTypes: true});
        files.forEach((f: any) => {
            if (f.isDirectory()) {
                findGitDirsRecursive(path.join(dir, f.name), found);
            }
        });
    }
}

function executeGitCommand(command: string, cwd: string) {
    return new Promise((resolve) => {
        let output = '';
        const proc = child_process.spawn('git', command.split(' '), {cwd: cwd, shell: true});
        proc.stdout.on('data', (data) => {
            output += data;
        });
        proc.stderr.on('data', (data) => {
            output += data;
        });
        proc.on('close', () => {
            resolve(output);
        });
    });
}
